{"meta":{"title":"vbird's Blog","subtitle":"vbird's Blog","description":"vbird's Blog博客是为大家打造的一个分享学习博客中心，让我们共同分享学习PHP技术心得，这里收集整理最全面的学习资料，学习PHP从这里开始。","author":"vbird","url":"http://hexo.wlphp.com","root":"/"},"pages":[{"title":"关于我","date":"2021-01-03T19:16:31.000Z","updated":"2021-01-03T06:22:34.403Z","comments":true,"path":"about/index.html","permalink":"http://hexo.wlphp.com/about/index.html","excerpt":"","text":"从事 WEB 开发，主要开发语言 PHP，熟悉使用 ThinkPHP 等主流框架；有一定的代码洁癖。 对服务端、前端、数据分析等技能有所了解。 热爱开源项目、热爱新技术、热爱新事物"}],"posts":[{"title":"鹿友会接口文档说明","slug":"luyouhui_api","date":"2021-01-01T14:19:37.000Z","updated":"2021-01-03T03:11:55.790Z","comments":true,"path":"2021/01/01/luyouhui_api/","link":"","permalink":"http://hexo.wlphp.com/2021/01/01/luyouhui_api/","excerpt":"","text":"鹿友会jsapi接口使用第三方框架：https://github.com/wendux/DSBridge-Android :joy: :joy: :joy: :astonished: :astonished: :astonished: 项目介绍鹿友会jsapi接口文档，h5和安卓以及苹果进行交互。 使用说明1.1 行程首页=&gt;目的地搜索接口 dsBridge.call(“goDestinationSearch”,{}, function (res) { }) 1.2 行程首页=&gt;广告跳转接口 dsBridge.call(“goAd”,{parameter:parameter,’type’:”carousel”}, function (res) { }) 1.3 行程首页=&gt;出境游、国内游、周边游、主题游、签证、门票、定制游、商城、充值 dsBridge.call(“goCat”,{parameter:parameter}, function (res) { }) 1.4 行程首页=&gt;右上角的二维码 dsBridge.call(“goQrCode”,{}, function (res) { }) 1.5 行程首页=&gt;轮播图下面公告 dsBridge.call(“goAnnouncement”,{parameter:parameter}, function (res) { }) 1.6 行程首页=&gt;行程产品：秒杀专区、鹿友专区产品、品质专区、常规专区 dsBridge.call(“goProduct”,{parameter:parameter}, function (res) { }) 1.7 行程首页=&gt;商城产品：商城推荐 dsBridge.call(“goGood”,{parameter:parameter}, function (res) { }) 1.8 行程首页=&gt;行程产品更多：秒杀专区、鹿友专区产品、品质专区、常规专区 dsBridge.call(“goProductMore”,{type:”miaosha、zhuanqu、pinzhi、changgui”}, function (res) { }) 1.9商城首页=&gt;商品二级分类 dsBridge.call(“goGoodCat”,{parameter:parameter}, function (res) { }) 2.0商城首页=&gt;常规商品详情dsBridge.call(“goGood”,{parameter:parameter}, function (res) { }) 2.1商城首页=&gt;限时抢购商品详情 dsBridge.call(“goFlashSaleGood”,{parameter:parameter}, function (res) { }) 2.2商城首页=&gt;拼团商品详情 dsBridge.call(“goCollageGood”,{parameter:parameter}, function (res) { }) 2.3商城首页=&gt;限时抢购更多、推荐更多、拼团更多、底部更多 dsBridge.call(“goGoodMore”,{type:”xianshi、tuijian、pintuan、dibu”}, function (res) { }) 2.4商城首页=&gt;广告跳转 dsBridge.call(“goShopAd”,{parameter:parameter,’type’:”carousel”}, function (res) { }) 2.5商城首页=&gt;商品搜索 dsBridge.call(“goGoodSearch”,{}, function (res) { }) 2.6 APP返回上一页 dsBridge.call(“goBack”,{}, function (res) { }) 2.8web定位 dsBridge.call(“getLocation”,{}, function (res) { })","categories":[],"tags":[]},{"title":"Emlog API设计文档","slug":"emlog_api","date":"2021-01-01T13:37:56.334Z","updated":"2021-01-03T03:10:06.921Z","comments":true,"path":"2021/01/01/emlog_api/","link":"","permalink":"http://hexo.wlphp.com/2021/01/01/emlog_api/","excerpt":"","text":"Emlog API设计文档本API文档说明有些Emlog模板的制作需要用到Ajax去异步调用数据，此时免不了要去写一些接口，模板制作的时候去写接口调用，无疑增加了开发者的工作量。于是我就想先规范一些Emlog的API接口的调用方式，然后制作一款API接口插件，这样可以减少模板开发者的技术负担，专注于界面的设计。 使用方式1231. 将API文件解压放入网站根目录2. Ajax访问 &#96;BLOG_URL + &#39;api.php?route&#x3D;请求地址&amp;请求参数&#96; 即可3. 拼接地址大概如： https:&#x2F;&#x2F;www.wlphp.com&#x2F;api.php?route&#x3D;article&amp;sid&#x3D;1 TODO 回复碎语 登录 注册 获取文章列表 请求方式: GET 请求地址: article 请求参数: sid 分类ID 可选，无sid则获取所有分类最新的文章 page 页码 perpage 每页条数 默认从emlog配置中取 top 是否仅获取首页置顶文章 keyword搜索关键词 响应数据: 1234567891011121314151617181920212223&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: &#123; total: 100, // 总数 list: [ &#123; gid: 1, // 文章ID title: &#x27;&#x27;, // 文章标题 date: 1527669094, // 发布时间，unix时间戳 excerpt: &#x27;&#x27;, // 描述 author: 1, // 作者ID nickname: &#x27;&#x27;, // 作者昵称 sortid: -1, // 分类ID sortname: &#x27;未分类&#x27;, // 分类名称 views: 100, // 浏览数 comnum: 100, // 评论数 top: &#x27;n&#x27;, // 首页置顶 n 不置顶 y 置顶 sortop: &#x27;n&#x27;, // 分类置顶 n 不置顶 y 置顶 &#125; ] &#125;&#125; 获取文章/页面详情 请求方式: GET 请求地址: articleInfo 请求参数: gid = 1 文章id 响应数据: 1234567891011121314151617181920212223&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: &#123; gid: 1, // 文章id title: &#x27;&#x27;, // 文章标题 date: 1527669094, // 发布时间，unix时间戳 content: &#x27;&#x27;, // 内容 sortid: 1, // 分类id sortname: &#x27;xx&#x27;, // 分类名称 views: 100, // 浏览数 comnum: 100, // 评论数 author: 1, // 作者id nickname: &#x27;&#x27;, // 作者昵称 allow_remark: &#x27;y&#x27;, // 是否允许评论 tags: [ &#123; tid: 1, tagname: &#x27;&#x27; &#125; ] // 标签 &#125;&#125; 获取某文章/页面关联的评论列表 请求方式: GET 请求地址: comments 请求参数: gid 文章ID page 评论页码 响应数据: 123456789101112131415161718192021222324&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: &#123; total: 100, // 评论总数 list: [ &#123; cid: 1, // 评论ID date: 1527138590, // 评论时间 poster: &#x27;admin&#x27;, // 评论者昵称 comment: &#x27;评论内容&#x27;, // 评论内容 children: [ // 子评论 &#123; cid: 1, // 评论ID date: 1527138590, // 评论时间 poster: &#x27;admin&#x27;, // 评论者昵称 comment: &#x27;评论内容&#x27;, // 评论内容 children: [] &#125; ] &#125; ] &#125;&#125; 发表评论 请求方式: POST 请求地址: addComments 请求参数: gid 文章ID poster 评论者昵称 mail 评论者邮箱 选填 url 评论人个人主页 选填 comment 评论内容 imgcode 验证码 响应数据: 123456789101112131415161718192021222324&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: &#123; total: 100, // 评论总数 list: [ &#123; cid: 1, // 评论ID date: 1527138590, // 评论时间 poster: &#x27;admin&#x27;, // 评论者昵称 comment: &#x27;评论内容&#x27;, // 评论内容 children: [ // 子评论 &#123; cid: 1, // 评论ID date: 1527138590, // 评论时间 poster: &#x27;admin&#x27;, // 评论者昵称 comment: &#x27;评论内容&#x27;, // 评论内容 children: [] &#125; ] &#125; ] &#125;&#125; 验证码 地址： http://BLOG_URL/include/lib/checkcode.php 当成图片引入显示就行 如： &lt;img src=&quot;http://BLOG_URL/include/lib/checkcode.php&quot; /&gt; 获取最新评论 从所有评论离获取几条最新的 请求方式: GET 请求地址: newComments 请求参数: - 说明: 条数可在后台侧边栏设置：最新评论 响应数据: 12345678910111213&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: [ &#123; cid: 1, // 评论ID gid: 1, date: 1527138590, // 评论时间 name: &#x27;admin&#x27;, // 评论者昵称 content: &#x27;评论内容&#x27; // 评论内容 &#125; ]&#125; 获取最新微语 请求方式: GET 请求地址: twitter 请求参数: page 页码 响应数据: 12345678910111213141516171819&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: &#123; total: 100, // 总数 list: [ &#123; id: 1, // 微语ID content: &#x27;&#x27;, // 微语内容 img: &#x27;&#x27;, // 微语包含的图片地址 author: 1, // 微语作者ID nickname: &#x27;&#x27;, // 微语作者昵称 date: &#x27;2013-04-04 10:58&#x27;, // 发布时间 replynum: 5, // 几条回复 t: &#x27;&#x27; // 替换表情处理过的内容 &#125; ] &#125;&#125; 获取微语回复 请求方式: GET 请求地址: replyTwitter 请求参数: tid 微语ID 响应数据: 123456789101112&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: [ &#123; id: 1, // 回复ID content: &#x27;&#x27;, // 回复内容 name: &#x27;&#x27;, // 回复者昵称 date: &#x27;2018-06-21 16:02&#x27; // 回复时间 &#125; ]&#125; 获取分类列表 请求方式: GET 请求地址: sorts 请求参数: - 响应数据: 12345678910111213141516171819202122232425262728&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: [ &#123; sid: 1, // 分类ID sortname: &#x27;&#x27;, // 分类名称 alias: &#x27;&#x27;, // 分类别名 description: &#x27;&#x27;, // 描述 template: &#x27;&#x27;, // 分类模版 lognum: 15, // 包含几篇文章 taxis: 5, // 排序序号 pid: 0, // 父类id children: [ // 子分类 &#123; sid: 1, // 分类ID sortname: &#x27;&#x27;, // 分类名称 alias: &#x27;&#x27;, // 分类别名 description: &#x27;&#x27;, // 描述 template: &#x27;&#x27;, // 分类模版 lognum: 15, // 包含几篇文章 taxis: 5, // 排序序号 pid: 0 // 父类id &#125; ] &#125; ]&#125; 获取文章附件 请求方式: GET 请求地址: attachment 请求参数: blogid 文章ID thumb 是否获取缩略图 1 获取 0 不获取 响应数据: 1234567891011121314151617&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: [ &#123; aid: 1, // 附件ID filename: &#x27;&#x27;, // 文件名称（上传之前的名称） filesize: 100, // 文件大小（Byte） filepath: &#x27;&#x27;, // 存储路径 addtime: 1502337380, // 上传时间 thumfor: 0, // 是谁的缩略图 mimetype: &#x27;image/png&#x27;, // memetype height: 397, // 图片的真实高度, （非图片为0） width: 579 // 图片的真实宽度，（非图片为0） &#125; ]&#125; 获取系统设置 仅输出部分公开的配置 请求方式: GET 请求地址: options 请求参数: - 响应数据: 12345678910111213&#123; state: 1, // 1 获取成功 0 获取失败 msg: &#x27;&#x27;, // 提示信息 data: &#123; blogname: &#x27;php菜鸟博客&#x27;, // 博客名称 bloginfo: &#x27;&#x27;, // 博客简介 site_key: &#x27;&#x27;, // 博客关键字 blogurl: &#x27;&#x27;, // 博客链接 icp: &#x27;&#x27;, // icp备案号 site_title: &#x27;&#x27;, // SEO网站标题 site_description: &#x27;&#x27; // SEO网站描述 &#125;&#125;","categories":[],"tags":[]}],"categories":[],"tags":[]}